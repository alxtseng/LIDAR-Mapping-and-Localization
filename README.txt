How to get this stuff to run:

- Install hector_slam and amcl ros packages first:
	sudo apt-get install ros-melodic-hector-slam
	sudo apt-get install ros-melodic-amcl

- Copy over amcl.launch to /opt/ros/melodic/share/amcl/launch
- Copy over mapping.launch and mapping_gen_odometry.launch to /opt/ros/melodic/share/hector_mapping/launch
- Run a ros master (roscore)

Now for the actual mapping part:

1. First run hector_mapping:
	run roslaunch hector_mapping mapping.launch
2. Now play the ros bag
	rosbag play --clock data_new.bag
3. Once the bag finishes and you can visualize the map generated in rviz, save it (run rosrun rviz rviz, add a new display and visualize the /map topic)
	rosrun map_server map_saver -f highbay
4. Now kill the hector_mapping node (ctrl+c)

You can see the generated map in highbay.pgm. Now, for localization: 

5. In 4 separate terminals, run the following commands in this order:
	1. rosrun map_server map_server highbay.yaml
	2. python odomtransformer.py
	3. roslaunch hector_mapping mapping_gen_odometry.launch
	4. roslaunch amcl amcl.launch
6. Now play the ros bag
	rosbag play --clock data_new.bag

7. In rviz, visualize the saved map (/map topic), the odometry being generated (/scanmatcher_odom), and the particle cloud (/particlecloud)

8. Visualize the tf tree at any time:
	rosrun tf view_frames


Launch file descriptions

------------Mapping (hector_mapping)------------------

mapping_default.launch: generates map to topic /map using laserscan data from lidar1/scan topic

------------Localization (amcl)-----------------------

mapping_gen_odometry.launch: generates odometry data using laser scan matching required by amcl, publishes to frame scanmatch_odom. This is required since without odometry data we can't localize. hector_mapping has an inbuilt laser scan matching algorithm that generates approx odometry data based on laser scans, which can be fed to amcl. This file also publishes some static transforms to link these two. 

amcl.launch: to localize using particle filter. An initial pose is required else the algorithm won't converge. This is specified in the launch file

odomtransformer.py: publishes a transform from odometry frame to base frame, to complete the tf tree. This is how we link the odometry data generated by hector_mapping and give it to amcl.

Sample output video: https://youtu.be/wAaa1Idl7E0
Ros bag of data: https://drive.google.com/file/d/1e3sr2bfhxzRAzBzy7HSYxU5_kU3xpF0Q/view?usp=sharing
